import pandas as pd
import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt

# import data from yahoo
def get_data(stocks, start, end):
    stockData = yf.download(stocks, start=start, end=end)['Close']
    returns_p = stockData.pct_change()
    meanReturns_p = returns_p.mean()
    covMatrix = returns_p.cov()
    return meanReturns_p, covMatrix

PortfolioList = ['MSCI', 'BND']  
stocks = PortfolioList  
endDate = '2019-12-31'
startDate = '2014-01-01'

meanReturns_p, covMatrix = get_data(stocks, startDate, endDate)
print(meanReturns_p)
print(covMatrix)

weights = np.array([0.6, 0.4])

#Monte Carlo Method
#Number of simulations
mc_sims = 100000
T = 1008 #timeframe

meanM = np.full(shape=(T, len(weights)), fill_value=meanReturns_p)
meanM = meanM.T

portfolio_sims = np.full(shape=(T, mc_sims), fill_value=0.0)

initialPortfolio = 100000

for m in range(0, mc_sims):
    #MC loops
    Z = np.random.normal(size=(T, len(weights)))
    L = np.linalg.cholesky(covMatrix)
    dailyReturns_p = meanM + np.inner(L, Z)
    portfolio_sims[:, m] = np.cumprod(np.inner(weights, dailyReturns_p.T)+1)*initialPortfolio

plt.plot(portfolio_sims)
plt.ylabel('Portfolio Value ($)')
plt.xlabel('Days')
plt.title("MC Simulation of a 60/40 portfolio")
plt.show()

# MonteCarlo simulation VaR and CVaR

def mcsVaR(returns_p, alpha=5):
    '''Input: pandas series of returns
       Output: percentile on return distribution to given confidence level alpha
    '''
    if isinstance(returns_p, pd.Series):
        return np.percentile(returns_p, alpha)
    else:
        raise TypeError("Expected a pandas data series")
  

def mcsCVaR(returns_p, alpha=5):
    '''Input: pandas series of returns
       Output: CVaR or Expected Shortfall on return distribution to given confidence level alpha
    '''
    if isinstance(returns_p, pd.Series):
        belowVar = returns_p <= mcsVaR(returns_p, alpha=alpha)
        return returns_p[belowVar].mean()
    else:
        raise TypeError("Expected a pandas data series")


portResults = pd.Series(portfolio_sims[-1,:])

VaR = initialPortfolio - mcsVaR(portResults, alpha=5)
CVaR = initialPortfolio - mcsCVaR(portResults, alpha=5)

print('VaR ${}'.format(round(VaR,2)))
print('CVaR ${}'.format(round(CVaR,2)))
